
Four7Segments.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000001d0  00000244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000038  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000262  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000138  00000000  00000000  0000050e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000235  00000000  00000000  00000646  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  0000087c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000e7  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000f8  00000000  00000000  00000983  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000a7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ed       	ldi	r30, 0xD0	; 208
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:
unsigned char SEG[10] = {0XC0, 0XF9,0XA4,0XB0,0X99,0X92,0X82, 0XD8,0X80,0X90};
unsigned char POWER[4] = { 0x01, 0x02, 0x04, 0x08};

unsigned int Number=1234;

int main(void) {
  be:	df 92       	push	r13
  c0:	ef 92       	push	r14
  c2:	ff 92       	push	r15
  c4:	0f 93       	push	r16
  c6:	1f 93       	push	r17
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
	unsigned char Index;
	unsigned int temp;

	DDRA = 0xff;
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xff;
  d0:	87 bb       	out	0x17, r24	; 23

	while (1) {
		temp = Number;
  d2:	20 91 0e 01 	lds	r18, 0x010E
  d6:	30 91 0f 01 	lds	r19, 0x010F

		Index = temp/1000;
		PORTA = ~POWER[3];
  da:	f0 90 0d 01 	lds	r15, 0x010D
  de:	f0 94       	com	r15
		PORTB = SEG[Index];
  e0:	c9 01       	movw	r24, r18
  e2:	68 ee       	ldi	r22, 0xE8	; 232
  e4:	73 e0       	ldi	r23, 0x03	; 3
  e6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <__udivmodhi4>
  ea:	e6 2f       	mov	r30, r22
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	e0 50       	subi	r30, 0x00	; 0
  f0:	ff 4f       	sbci	r31, 0xFF	; 255
  f2:	d0 80       	ld	r13, Z
		temp = temp%1000;
  f4:	c9 01       	movw	r24, r18
  f6:	68 ee       	ldi	r22, 0xE8	; 232
  f8:	73 e0       	ldi	r23, 0x03	; 3
  fa:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <__udivmodhi4>
  fe:	9c 01       	movw	r18, r24
		_delay_ms(cDelayTime);

		Index = temp/100;
		PORTA = ~POWER[2];
 100:	00 91 0c 01 	lds	r16, 0x010C
 104:	00 95       	com	r16
		PORTB = SEG[Index];
 106:	64 e6       	ldi	r22, 0x64	; 100
 108:	70 e0       	ldi	r23, 0x00	; 0
 10a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <__udivmodhi4>
 10e:	e6 2f       	mov	r30, r22
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	e0 50       	subi	r30, 0x00	; 0
 114:	ff 4f       	sbci	r31, 0xFF	; 255
 116:	e0 80       	ld	r14, Z
		temp = temp%100;
 118:	c9 01       	movw	r24, r18
 11a:	64 e6       	ldi	r22, 0x64	; 100
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <__udivmodhi4>
 122:	9c 01       	movw	r18, r24
		_delay_ms(cDelayTime);

		Index = temp/10;
		PORTA = ~POWER[1];
 124:	10 91 0b 01 	lds	r17, 0x010B
 128:	10 95       	com	r17
		PORTB = SEG[Index];
 12a:	6a e0       	ldi	r22, 0x0A	; 10
 12c:	70 e0       	ldi	r23, 0x00	; 0
 12e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <__udivmodhi4>
 132:	c6 2f       	mov	r28, r22
 134:	d0 e0       	ldi	r29, 0x00	; 0
		temp = temp%10;
		_delay_ms(cDelayTime);

		Index = temp;
		PORTA = ~POWER[0];
 136:	40 91 0a 01 	lds	r20, 0x010A
 13a:	40 95       	com	r20
		PORTB = SEG[Index];
 13c:	c9 01       	movw	r24, r18
 13e:	6a e0       	ldi	r22, 0x0A	; 10
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <__udivmodhi4>
 146:	e8 2f       	mov	r30, r24
 148:	f0 e0       	ldi	r31, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 14a:	20 e7       	ldi	r18, 0x70	; 112
 14c:	31 e0       	ldi	r19, 0x01	; 1
		temp = temp%100;
		_delay_ms(cDelayTime);

		Index = temp/10;
		PORTA = ~POWER[1];
		PORTB = SEG[Index];
 14e:	c0 50       	subi	r28, 0x00	; 0
 150:	df 4f       	sbci	r29, 0xFF	; 255
		temp = temp%10;
		_delay_ms(cDelayTime);

		Index = temp;
		PORTA = ~POWER[0];
		PORTB = SEG[Index];
 152:	e0 50       	subi	r30, 0x00	; 0
 154:	ff 4f       	sbci	r31, 0xFF	; 255

	while (1) {
		temp = Number;

		Index = temp/1000;
		PORTA = ~POWER[3];
 156:	fb ba       	out	0x1b, r15	; 27
		PORTB = SEG[Index];
 158:	d8 ba       	out	0x18, r13	; 24
 15a:	88 ec       	ldi	r24, 0xC8	; 200
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	d9 01       	movw	r26, r18
 160:	11 97       	sbiw	r26, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <main+0xa2>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 164:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 166:	d9 f7       	brne	.-10     	; 0x15e <main+0xa0>
		temp = temp%1000;
		_delay_ms(cDelayTime);

		Index = temp/100;
		PORTA = ~POWER[2];
 168:	0b bb       	out	0x1b, r16	; 27
		PORTB = SEG[Index];
 16a:	e8 ba       	out	0x18, r14	; 24
 16c:	88 ec       	ldi	r24, 0xC8	; 200
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	d9 01       	movw	r26, r18
 172:	11 97       	sbiw	r26, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <main+0xb4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 176:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 178:	d9 f7       	brne	.-10     	; 0x170 <main+0xb2>
		temp = temp%100;
		_delay_ms(cDelayTime);

		Index = temp/10;
		PORTA = ~POWER[1];
 17a:	1b bb       	out	0x1b, r17	; 27
		PORTB = SEG[Index];
 17c:	88 81       	ld	r24, Y
 17e:	88 bb       	out	0x18, r24	; 24
 180:	88 ec       	ldi	r24, 0xC8	; 200
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	d9 01       	movw	r26, r18
 186:	11 97       	sbiw	r26, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <main+0xc8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 18a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 18c:	d9 f7       	brne	.-10     	; 0x184 <main+0xc6>
		temp = temp%10;
		_delay_ms(cDelayTime);

		Index = temp;
		PORTA = ~POWER[0];
 18e:	4b bb       	out	0x1b, r20	; 27
		PORTB = SEG[Index];
 190:	80 81       	ld	r24, Z
 192:	88 bb       	out	0x18, r24	; 24
 194:	88 ec       	ldi	r24, 0xC8	; 200
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	d9 01       	movw	r26, r18
 19a:	11 97       	sbiw	r26, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <main+0xdc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 19e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1a0:	d9 f7       	brne	.-10     	; 0x198 <main+0xda>
 1a2:	d9 cf       	rjmp	.-78     	; 0x156 <main+0x98>

000001a4 <__udivmodhi4>:
 1a4:	aa 1b       	sub	r26, r26
 1a6:	bb 1b       	sub	r27, r27
 1a8:	51 e1       	ldi	r21, 0x11	; 17
 1aa:	07 c0       	rjmp	.+14     	; 0x1ba <__udivmodhi4_ep>

000001ac <__udivmodhi4_loop>:
 1ac:	aa 1f       	adc	r26, r26
 1ae:	bb 1f       	adc	r27, r27
 1b0:	a6 17       	cp	r26, r22
 1b2:	b7 07       	cpc	r27, r23
 1b4:	10 f0       	brcs	.+4      	; 0x1ba <__udivmodhi4_ep>
 1b6:	a6 1b       	sub	r26, r22
 1b8:	b7 0b       	sbc	r27, r23

000001ba <__udivmodhi4_ep>:
 1ba:	88 1f       	adc	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	5a 95       	dec	r21
 1c0:	a9 f7       	brne	.-22     	; 0x1ac <__udivmodhi4_loop>
 1c2:	80 95       	com	r24
 1c4:	90 95       	com	r25
 1c6:	bc 01       	movw	r22, r24
 1c8:	cd 01       	movw	r24, r26
 1ca:	08 95       	ret

000001cc <_exit>:
 1cc:	f8 94       	cli

000001ce <__stop_program>:
 1ce:	ff cf       	rjmp	.-2      	; 0x1ce <__stop_program>
